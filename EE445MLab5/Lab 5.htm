<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Lab 5.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Lab 5.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Apr 10 13:47:03 2015
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; diskError &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[83]">Reset_Handler</a>
 <LI><a href="#[100]">DisableInterrupts</a>
 <LI><a href="#[b5]">EnableInterrupts</a>
 <LI><a href="#[a4]">StartCritical</a>
 <LI><a href="#[a6]">EndCritical</a>
 <LI><a href="#[101]">WaitForInterrupt</a>
 <LI><a href="#[9f]">__user_initial_stackheap</a>
 <LI><a href="#[a8]">OS_DisableInterrupts</a>
 <LI><a href="#[ac]">OS_EnableInterrupts</a>
 <LI><a href="#[d]">SysTick_Handler</a>
 <LI><a href="#[102]">StartOS</a>
 <LI><a href="#[103]">Thread_Switch</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">ADC0Seq1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC0Seq1_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0Seq0_Handler</a> from adc.o(i.ADC0Seq0_Handler) referenced from startup.o(RESET)
 <LI><a href="#[1d]">ADC0Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1e]">ADC0Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1f]">ADC0Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3e]">ADC1Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3f]">ADC1Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[40]">ADC1Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[41]">ADC1Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[35]">CAN0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[36]">CAN1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[37]">CAN2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[27]">Comp0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[28]">Comp1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[29]">Comp2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[82]">DebounceTaskPF4</a> from os.o(i.DebounceTaskPF4) referenced from os.o(i.GPIOPortF_Handler)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[38]">Ethernet_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[43]">ExtBus_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[60]">FPU_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[68]">Fan0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2b]">FlashCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e]">GPIOPortA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[f]">GPIOPortB_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[10]">GPIOPortC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[11]">GPIOPortD_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[12]">GPIOPortE_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2c]">GPIOPortF_Handler</a> from os.o(i.GPIOPortF_Handler) referenced from startup.o(RESET)
 <LI><a href="#[2d]">GPIOPortG_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2e]">GPIOPortH_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[44]">GPIOPortJ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[45]">GPIOPortK_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[46]">GPIOPortL_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[65]">GPIOPortM_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[66]">GPIOPortN_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6a]">GPIOPortP1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6b]">GPIOPortP2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6c]">GPIOPortP3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6d]">GPIOPortP4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6e]">GPIOPortP5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6f]">GPIOPortP6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[70]">GPIOPortP7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[69]">GPIOPortP_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[72]">GPIOPortQ1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[73]">GPIOPortQ2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[74]">GPIOPortQ3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[75]">GPIOPortQ4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[76]">GPIOPortQ5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[77]">GPIOPortQ6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[78]">GPIOPortQ7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[71]">GPIOPortQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[79]">GPIOPortR_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7a]">GPIOPortS_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[39]">Hibernate_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[16]">I2C0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[33]">I2C1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4e]">I2C2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4f]">I2C3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[63]">I2C4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[64]">I2C5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[42]">I2S0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[62]">LPC0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[61]">PECI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[17]">PWM0Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[18]">PWM0Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[19]">PWM0Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1a]">PWM0Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3b]">PWM0Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7f]">PWM1Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7b]">PWM1Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7c]">PWM1Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7d]">PWM1Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7e]">PWM1Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1b]">Quadrature0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[34]">Quadrature1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[67]">Quadrature2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[83]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15]">SSI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[30]">SSI1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[47]">SSI2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[48]">SSI3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2a]">SysCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from osasm.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">Timer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[22]">Timer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[23]">Timer1A_Handler</a> from os.o(i.Timer1A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[24]">Timer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[25]">Timer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[26]">Timer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[31]">Timer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[32]">Timer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[50]">Timer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[51]">Timer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[52]">Timer5A_Handler</a> from os.o(i.Timer5A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[53]">Timer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART0_Handler</a> from uart.o(i.UART0_Handler) referenced from startup.o(RESET)
 <LI><a href="#[14]">UART1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2f]">UART2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[49]">UART3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4a]">UART4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4b]">UART5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4c]">UART6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4d]">UART7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3a]">USB0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[20]">WDT_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[54]">WideTimer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[55]">WideTimer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[56]">WideTimer1A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[57]">WideTimer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[58]">WideTimer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[59]">WideTimer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5a]">WideTimer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5b]">WideTimer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5c]">WideTimer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5d]">WideTimer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5e]">WideTimer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5f]">WideTimer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[80]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[81]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[3d]">uDMA_Error</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3c]">uDMA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[83]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Comp0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIOPortB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIOPortD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPIOPortE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Timer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>Timer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Timer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WideTimer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>WideTimer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>WideTimer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[85]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[87]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[de]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[df]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[88]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[89]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[8e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[93]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[f8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[86]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[fc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[fd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; diskError &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[fe]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[92]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ff]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[94]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[100]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a4]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Init
</UL>

<P><STRONG><a name="[a6]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Init
</UL>

<P><STRONG><a name="[101]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a8]"></a>OS_DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[ac]"></a>OS_EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>StartOS</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>Thread_Switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diskError
</UL>

<P><STRONG><a name="[8a]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[99]"></a>__printf</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[106]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[97]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[91]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[109]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.ADC0Seq0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>CS_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, edisk.o(i.CS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Init
</UL>

<P><STRONG><a name="[2c]"></a>GPIOPortF_Handler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os.o(i.GPIOPortF_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GPIOPortF_Handler &rArr; OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>GPIO_Init</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, os.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>MakeTxSSI</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, edisk.o(i.MakeTxSSI))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
</UL>

<P><STRONG><a name="[db]"></a>MakeTxhigh</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, edisk.o(i.MakeTxhigh))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
</UL>

<P><STRONG><a name="[a3]"></a>OS_AddThread</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, os.o(i.OS_AddThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInitialStack
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
</UL>

<P><STRONG><a name="[a7]"></a>OS_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os.o(i.OS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_Init &rArr; UART_Init &rArr; TxFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>OS_Kill</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, os.o(i.OS_Kill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Kill
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebounceTaskPF4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diskError
</UL>

<P><STRONG><a name="[a1]"></a>OS_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os.o(i.OS_Sleep))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebounceTaskPF4
</UL>

<P><STRONG><a name="[ad]"></a>OS_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os.o(i.OS_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>

<P><STRONG><a name="[aa]"></a>PLL_Init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, pll.o(i.PLL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[ae]"></a>RxFifo_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.RxFifo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RxFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[b8]"></a>RxFifo_Put</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart.o(i.RxFifo_Put))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[b9]"></a>RxFifo_Size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.RxFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[af]"></a>SSI0_Init</STRONG> (Thumb, 240 bytes, Stack size 4 bytes, edisk.o(i.SSI0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSI0_Init &rArr; CS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_speed
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
</UL>

<P><STRONG><a name="[dc]"></a>SSI0_Out</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, edisk.o(i.SSI0_Out))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
</UL>

<P><STRONG><a name="[a5]"></a>SetInitialStack</STRONG> (Thumb, 326 bytes, Stack size 0 bytes, os.o(i.SetInitialStack))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[23]"></a>Timer1A_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os.o(i.Timer1A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>Timer1_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, os.o(i.Timer1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Timer1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[52]"></a>Timer5A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os.o(i.Timer5A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>TxFifo_Get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(i.TxFifo_Get))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[b1]"></a>TxFifo_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.TxFifo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TxFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[b7]"></a>TxFifo_Put</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart.o(i.TxFifo_Put))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[b3]"></a>TxFifo_Size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.TxFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[13]"></a>UART0_Handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart.o(i.UART0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_Handler &rArr; copySoftwareToHardware
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Size
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>UART_Init</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; TxFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[b6]"></a>UART_OutChar</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(i.UART_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_OutChar &rArr; copySoftwareToHardware
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Put
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[9a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[95]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bb]"></a>diskError</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lab5.o(i.diskError))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = diskError &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>eDisk_Init</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, edisk.o(i.eDisk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eDisk_Init &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_speed
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Init
</UL>

<P><STRONG><a name="[c5]"></a>eDisk_Read</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, edisk.o(i.eDisk_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eDisk_Read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_ReadBlock
</UL>

<P><STRONG><a name="[c7]"></a>eDisk_ReadBlock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, edisk.o(i.eDisk_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eDisk_ReadBlock &rArr; eDisk_Read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFreeBlock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WOpen
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ReadNext
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ROpen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Delete
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Create
</UL>

<P><STRONG><a name="[c8]"></a>eDisk_Write</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, edisk.o(i.eDisk_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eDisk_Write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_WriteBlock
</UL>

<P><STRONG><a name="[ca]"></a>eDisk_WriteBlock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, edisk.o(i.eDisk_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eDisk_WriteBlock &rArr; eDisk_Write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFreeBlock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Format
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Delete
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Create
</UL>

<P><STRONG><a name="[cb]"></a>eFile_Create</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, efile.o(i.eFile_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eFile_Create &rArr; eDisk_WriteBlock &rArr; eDisk_Write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_WriteBlock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>eFile_Delete</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, efile.o(i.eFile_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eFile_Delete &rArr; eDisk_WriteBlock &rArr; eDisk_Write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_WriteBlock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>eFile_EndRedirectToFile</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, efile.o(i.eFile_EndRedirectToFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = eFile_EndRedirectToFile
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WClose
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cf]"></a>eFile_Format</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, efile.o(i.eFile_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eFile_Format &rArr; eDisk_WriteBlock &rArr; eDisk_Write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>eFile_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, efile.o(i.eFile_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eFile_Init &rArr; eDisk_Init &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>eFile_ROpen</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, efile.o(i.eFile_ROpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eFile_ROpen &rArr; eDisk_ReadBlock &rArr; eDisk_Read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>eFile_ReadNext</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, efile.o(i.eFile_ReadNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eFile_ReadNext &rArr; eDisk_ReadBlock &rArr; eDisk_Read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>eFile_WClose</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, efile.o(i.eFile_WClose))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_EndRedirectToFile
</UL>

<P><STRONG><a name="[d3]"></a>eFile_WOpen</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, efile.o(i.eFile_WOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eFile_WOpen &rArr; eDisk_ReadBlock &rArr; eDisk_Read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>eFile_Write</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, efile.o(i.eFile_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eFile_Write &rArr; getFreeBlock &rArr; eDisk_WriteBlock &rArr; eDisk_Write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFreeBlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_WriteBlock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[81]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fputc &rArr; eFile_Write &rArr; getFreeBlock &rArr; eDisk_WriteBlock &rArr; eDisk_Write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamToFile
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_EndRedirectToFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>getFreeBlock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, efile.o(i.getFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getFreeBlock &rArr; eDisk_WriteBlock &rArr; eDisk_Write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_WriteBlock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
</UL>

<P><STRONG><a name="[90]"></a>main</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, lab5.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = main &rArr; diskError &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diskError
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WOpen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WClose
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ReadNext
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ROpen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Format
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Delete
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Create
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d6]"></a>streamToFile</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, efile.o(i.streamToFile))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c2]"></a>DESELECT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, edisk.o(i.DESELECT))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
</UL>

<P><STRONG><a name="[bf]"></a>SELECT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, edisk.o(i.SELECT))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>

<P><STRONG><a name="[c4]"></a>power_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, edisk.o(i.power_off))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>

<P><STRONG><a name="[bd]"></a>power_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, edisk.o(i.power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = power_on &rArr; SSI0_Init &rArr; CS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>

<P><STRONG><a name="[c6]"></a>rcvr_datablock</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, edisk.o(i.rcvr_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcvr_datablock &rArr; rcvr_spi_m
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi_m
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
</UL>

<P><STRONG><a name="[c1]"></a>rcvr_spi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, edisk.o(i.rcvr_spi))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi_m
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[d8]"></a>rcvr_spi_m</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, edisk.o(i.rcvr_spi_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcvr_spi_m
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[c0]"></a>send_cmd</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, edisk.o(i.send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>

<P><STRONG><a name="[be]"></a>send_initial_clock_train</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, edisk.o(i.send_initial_clock_train))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_initial_clock_train
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Out
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTxhigh
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTxSSI
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
</UL>

<P><STRONG><a name="[c3]"></a>set_max_speed</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, edisk.o(i.set_max_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_max_speed &rArr; SSI0_Init &rArr; CS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>

<P><STRONG><a name="[d9]"></a>wait_ready</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, edisk.o(i.wait_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wait_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[c9]"></a>xmit_datablock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, edisk.o(i.xmit_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
</UL>

<P><STRONG><a name="[da]"></a>xmit_spi</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, edisk.o(i.xmit_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xmit_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[82]"></a>DebounceTaskPF4</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os.o(i.DebounceTaskPF4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DebounceTaskPF4 &rArr; OS_Kill
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(i.GPIOPortF_Handler)
</UL>
<P><STRONG><a name="[b4]"></a>copyHardwareToSoftware</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, uart.o(i.copyHardwareToSoftware))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = copyHardwareToSoftware
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Size
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[b2]"></a>copySoftwareToHardware</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(i.copySoftwareToHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copySoftwareToHardware
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Size
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[80]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
